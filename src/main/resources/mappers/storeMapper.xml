<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">

	<!-- 상품으로 조회시 -->
	<select id="listStore" resultType="storeDto">
		<!--   select * from swc_store where compNo = #{compNo} and attrib not like 
			'XXX%'-->
		<!-- 23/02/09 수정 사항 -->
		<!-- select a.*, b.productName from swc_store a left join swc_product b 
			on a.productNo = b.productNo where a.compNo = #{compNo} and a.attrib not 
			like 'XXX%' order by a.storeNo desc; -->
		<!-- 23.02.13 수정사항 -->
		<!-- select a.productNo , sum(a.storeQty) as storeQty, b.productName, b.custNo, 
			b.productCategoryNo, b.productCategoryName from swc_store a left join swc_product 
			b on a.productNo = b.productNo group by productNo ; -->
		<!--  select a.productNo , sum(a.storeQty) as storeQty, b.productName,
		b.custNo, b.productCategoryNo, b.productCategoryName, c.custName from
		swc_store a
		left join swc_product b on a.productNo = b.productNo
		left join swc_cust c on b.custNo = c.custNo
		group by productNo ;-->
	<!--  	select a.*, c.custName, b.productCategoryName, b.productName from swc_store a  
		left join swc_product b on a.productNo = b.productNo 
		left join swc_cust c on c.custNo  = b.custNo 
		where a.compNo = #{compNo} and a.attrib not like '%XXX%' order by a.storeNo desc;-->    
		
		select a.*, c.custName, b.productCategoryName, b.productName from swc_store a  
		left join swc_product b on a.productNo = b.productNo 
		left join swc_cust c on c.custNo  = b.custNo 
		where  a.attrib not like '%XXX%' 
    <if test="storeNo != null and storeNo != '' "> and a.storeNo = #{storeNo} </if>
	<if test="productNo != null and productNo != '' ">	and a.productNo = #{productNo}</if>
	<if test="custName != null and custName != '' ">	and c.custName like CONCAT('%', #{custName}, '%')</if>
	<if test="productCategoryName != null and productCategoryName != '' ">	and b.productCategoryName like CONCAT('%', #{productCategoryName}, '%')</if>
	<if test="serialNo != null and serialNo != '' ">	and a.serialNo like CONCAT('%', #{serialNo}, '%')</if>
	<if test="productName != null and productName != '' ">	and b.productName like  CONCAT('%', #{productName}, '%') </if>
		order by a.storeNo desc;  	
	</select>

	<select id="storeList" resultType="storeDto">
		select a.*, b.productName from swc_store a left join swc_product b on
		a.productNo = b.productNo where a.compNo = #{compNo} and a.attrib not
		like 'XXX%';
	</select>


	<select id="detailStore" resultType="storeDto">
		<!-- select a.*, b.productName from swc_store a left join swc_product b 
			on a.productNo = b.productNo where a.storeNo = #{storeNo} and a.attrib not 
			like 'XXX%'; -->
		<!-- 23/02/13 수정 -->
		<!-- select a.*, b.productName from swc_store a left join swc_product b on
		a.productNo = b.productNo where a.productNo = #{productNo} and
		a.attrib not like 'XXX%'; -->
		
		select a.*, b.productName from swc_store a left join swc_product b on
		a.productNo = b.productNo where a.storeNo = #{storeNo} and
		a.attrib not like 'XXX%';
	</select>

	<insert id="insertStore">
		insert into swc_store
		(compNo,productNo,serialNo,storeType,storeQty,storeAmount,locationNo,userNo,storeUnit,comment,regDate,attrib)
		values
		(#{compNo},#{productNo},#{serialNo},#{storeType},#{storeQty},#{storeAmount},#{locationNo},#{userNo},#{storeUnit},#{comment},now(),'10000')
	</insert>

	<update id="updateStore">
		update swc_store set
		serialNo = #{serialNo},
		storeType = #{storeType},
		storeQty = #{storeQty},
		storeAmount=#{storeAmount},
		locationNo = #{locationNo},
		storeUnit =#{storeUnit} ,
		comment = #{comment},
		modDate = now()
		where storeNo=#{storeNo}
	</update>

	<delete id="deleteStore">
		update swc_store set attrib = 'XXXXX', modDate = now() where
		storeNo=#{storeNo};
	</delete>

	<insert id="insertInoutStore">
		insert into swc_store_inout (compNo,inoutType, inoutQty, storeNo,locationNo,inoutAmount,
		comment ,regDate,attrib)
		values
		(#{compNo},#{inoutType},#{inoutQty},#{storeNo},#{locationNo},#{inoutAmount},#{comment},now(),'10000');
	</insert>

	<update id="plusStoreQty">
		update swc_store set storeQty = storeQty + #{storeQty} where storeNo =
		#{storeNo}
	</update>


	<update id="setModQty">
		update swc_store set storeQty = (storeQty + #{storeQty}) where storeNo = #{storNo}
	</update>

<!--  2월 16일 수정사항 반영=================================================================================================== -->
   <insert id ="insertStore2">INSERT INTO swc_store (compNo,productNo,serialNo,storeQty,storeAmount,locationNo,userNo,comment,regDate,attrib)
	values
	(#{compNo},#{productNo},#{serialNo},0,#{storeAmount},#{locationNo},#{userNo},#{comment},now(),'10000')</insert>
	
	<select id ="getLastStoreNo" resultType="Integer">
	SELECT max(storeNo) from swc_store where compNo = #{compNo} AND productNo = #{productNo} and serialNo =#{serialNo} AND storeAmount = #{storeAmount}
    AND locationNo =#{locationNo} AND userNo = #{userNo} ; 
	</select>
	
	<update id="serialUpdate">  UPDATE swc_store set serialNo = #{serialNo} WHERE storeNo = #{storeNo}</update> 
 
	<select id="getStoreNo" resultType="Integer"> SELECT storeNo from swc_store where productNo = #{productNo}  AND attrib not like 'XXX%' AND (serialNo = "" OR serialNo IS NULL);  </select>

	<select id="getCount" resultType="Integer"> SELECT count(storeNo) from swc_store where productNo = #{productNo}  AND attrib not like 'XXX%' AND (serialNo = "" OR serialNo IS NULL); </select>
 
</mapper>
